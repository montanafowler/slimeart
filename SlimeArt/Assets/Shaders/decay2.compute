// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> deposit_in;
RWTexture2D<float4> deposit_out;


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    uint2 p = id.xy;

    // Average deposit values in a 3x3x3 neighborhood
    // Apply distance-based weighting to prevent overestimation along diagonals
    float4 v = float4(0.0, 0.0, 0.0, 0.0);
    float w = 0.0;
    for (int dx = -1; dx <= 1; dx++) {
        for (int dy = -1; dy <= 1; dy++) {
            float weight = (all(int2(dx,dy)) == 0)? 1.0 : 1.0 / sqrt(float(abs(dx) + abs(dy)));
            int2 txcoord = int2(p) + int2(dx, dy);
            txcoord.x = txcoord.x % 512;
            txcoord.y = txcoord.y % 512;
            v += weight * deposit_in[txcoord];
            w += weight;
        }
    }
    v /= w;

    // Decay the deposit by a constant factor
    v *= 0.9;
    deposit_out[p] = v;//deposit_in[p];

    // Decay the trace a little
    //tex_trace[p] *= 0.995;

}
