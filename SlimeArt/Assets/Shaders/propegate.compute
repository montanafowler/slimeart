
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> particle_render_texture;
RWStructuredBuffer<float> x_y_theta_dataType;
RWStructuredBuffer<float> moveDist_SenseDist_particleDepositStrength_lifetime;
RWStructuredBuffer<float> red_green_blue_alpha;
RWStructuredBuffer<float> turn_sense_angles;
RWTexture2D<float4> tex_deposit;
RWTexture2D<float4> tex_trace;

float world_width; //
float world_height; // grid dimensions - note that the particle positions are also stored in the grid coordinates, but continuous
int world_depth; //
float move_sense_coef;
float normalization_factor;
float deposit_strength;

float pixelWidth;
float pixelHeight;
float COMPUTE_GRID_WIDTH;
float COMPUTE_GRID_HEIGHT;
int playingOrPausing; // 0 is play, 1 is pause

#define PI 3.141592
#define HALFPI 0.5 * PI
#define TWOPI 2.0 * PI
#define PARTICLE 1.0
#define DEPOSIT_EMITTER 2.0
#define DEPOSIT 3.0
#define NO_DATA 0.0
#define PLAY 0
#define PAUSE 1

struct RNG {
#define BAD_W 0x464fffffU
#define BAD_Z 0x9068ffffU
    uint m_w;
    uint m_z;

    void set_seed(uint seed1, uint seed2)
    {
        m_w = seed1;
        m_z = seed2;
        if (m_w == 0U || m_w == BAD_W) ++m_w;
        if (m_w == 0U || m_z == BAD_Z) ++m_z;
    }

    void get_seed(out uint seed1, out uint seed2)
    {
        seed1 = m_w;
        seed2 = m_z;
    }

    uint random_uint()
    {
        m_z = 36969U * (m_z & 65535U) + (m_z >> 16U);
        m_w = 18000U * (m_w & 65535U) + (m_w >> 16U);
        return uint((m_z << 16U) + m_w);
    }

    float random_float()
    {
        return float(random_uint()) / float(0xFFFFFFFFU);
    }
};

uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

float2 rotate(float2 v, float2 a, float angle) {
    float3 particle_render_texture = float3(0.0, 0.0, 0.0);//cos(angle) * v + sin(angle) * (cross(a, v)) + dot(a, v) * (1.0 - cos(angle)) * a;
  //  float2 result = float2(cos(angle) * )
    return particle_render_texture;
}

float mod(float x, float y) {
    return x - y * floor(x / y);
}

// THIS MIGHT BE WRONG TOO!! COMPUTE GRID STUFF 11/18/20
[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {

    uint idx = id.x + id.y * COMPUTE_GRID_WIDTH; // not sure if this is right 7/3/20

    if (idx % 4 != 0) {
        return; // we should only do calculations when we have the first of the four indices of the buffers
    }

    // Fetch current particle state
    float x_normalized = x_y_theta_dataType[idx] / world_width;//particles_x[idx]/world_width;// *pixelWidth;
    float y_normalized = x_y_theta_dataType[idx + 1] / world_height;//particles_y[idx]/world_height;// *pixelHeight;
    float x = x_y_theta_dataType[idx]; //particles_x[idx];
    float y = x_y_theta_dataType[idx + 1];// particles_y[idx];
    float theta = x_y_theta_dataType[idx + 2];//particles_theta[idx];
    float data_type = x_y_theta_dataType[idx + 3];//data_types[idx];
    float move_distance = moveDist_SenseDist_particleDepositStrength_lifetime[idx];//move_distance_buffer[idx];
    float sense_distance = moveDist_SenseDist_particleDepositStrength_lifetime[idx + 1];//sense_distance_buffer[idx];
    float agent_deposit = moveDist_SenseDist_particleDepositStrength_lifetime[idx + 2]; //particle_deposit_strength_buffer[idx];
    float lifetime = moveDist_SenseDist_particleDepositStrength_lifetime[idx + 3];
    float red = red_green_blue_alpha[idx];
    float green = red_green_blue_alpha[idx + 1];
    float blue = red_green_blue_alpha[idx + 2];
    float alpha = red_green_blue_alpha[idx + 3];
    float turn_angle = turn_sense_angles[idx];
    float half_sense_spread = turn_sense_angles[idx + 1];
    //float tex_trace_decay = turn_sense_angles[idx + 2];

    //return;
    if (data_type == DEPOSIT_EMITTER) {
        tex_deposit[uint2(x_normalized * world_width,
            y_normalized * world_height)] += float4(deposit_strength, deposit_strength, deposit_strength, 1.0);// *particle_weight; // NOT ATOMIC! (not sure what particle weight is... maybe parameter?)
        return;
    }

    if (data_type == DEPOSIT) {
        tex_deposit[uint2(x, y)] += float4(deposit_strength, 0.0, 0.0, 1.0);// *particle_weight; // NOT ATOMIC! (not sure what particle weight is... maybe parameter?)
        x_y_theta_dataType[idx + 3] = NO_DATA; // it is temporary deposit, so erase it after
        return;
    }

    if (data_type == NO_DATA) {
        // no particle
        return;
    }

    RNG rng;
    rng.set_seed(
        wang_hash(359 * idx),
        wang_hash(uint(x * y))
    );
    tex_trace[uint2(x, y)] = float4(red, green, blue, alpha);

    // Get vector which points in the current particle's direction
    float2 center_axis = float2(cos(theta), sin(theta));

    // Get base vector which points away from the current particle's direction and will be used to sample environment in other directions
    float sense_theta = theta - half_sense_spread; // sense spread is the difference between the cone's center and the side of it
    float2 cone_edge_direction = float2(cos(sense_theta), sin(sense_theta)); //RIGHT? 7/3/20 float3(sin(sense_theta) * cos(ph), cos(sense_theta), sin(sense_theta) * sin(ph));

    // Probabilistic sensing,  how far out you sense is random
    float sense_distance_prob = sense_distance;
    float xi = clamp(rng.random_float(), 0.001, 0.999); // random for each particle and timestep
    float distance_scaling_factor = -0.3033 * log((pow(xi + 0.005, -0.4) - 0.9974) / 7.326); // using Maxwell-Boltzmann distribution
    sense_distance_prob *= distance_scaling_factor;

    // Sample environment along the movement axis
    int2 p = int2(x, y); // current location of particle
    float current_deposit = tex_deposit[p].x; // deposit at current location
    float2 center_sense_pos = center_axis * sense_distance_prob; // the random point along the direction the particle is traveling
    float deposit_ahead = tex_deposit[p + int2(center_sense_pos)].x; // sample from that random point to get the deposit

    // Stochastic MC direction sampling
    float random_angle = rng.random_float() * half_sense_spread * 2.0 + sense_theta; //TWOPI - PI; // random angle between -pi and +pi, random azimuth
    // I think off_center_base_dir/cone_edge_direction is the direction of theta - sense spread
    // so then I think this rotation is picking a vector at the random angle between these two vectors in another plane
    float2 sense_offset = float2(cos(random_angle), sin(random_angle)) * sense_distance_prob; //rotate(off_center_base_dir, center_axis, random_angle) * sense_distance_prob; // is this gonna work? 7/3/20
    float sense_deposit = tex_deposit[p + int2(sense_offset)].x;

    float sharpness = move_sense_coef;
    float p_straight = pow(max(deposit_ahead, 0.0), sharpness);
    float p_turn = pow(max(sense_deposit, 0.0), sharpness);
    float xiDir = rng.random_float();

    // if there is nonzero deposit in either the random sample or the sample ahead
    if (p_straight + p_turn > 1.0e-5) {

        // if there is more deposit towards random angle
        if (p_turn > p_straight) {
            float theta_turn = theta - turn_angle;
            float2 cone_edge_direction_turn = float2(cos(theta_turn), sin(theta_turn));
            float2 new_direction = float2(cos(random_angle), sin(random_angle)); //rotate( cone_edge_direction_turn, center_axis, random_angle);
            theta = atan2(new_direction.y, new_direction.x); //atan2(new_direction.z, new_direction.x); // not sure which it should be
            //th = acos(new_direction.y / length(new_direction));
        }
    }

    // Make a step
    if (playingOrPausing == PLAY) {
        float2 dp = float2(cos(theta), sin(theta)) * move_distance * (0.1 + 0.9 * distance_scaling_factor);
        x += dp.x;
        y += dp.y;
    }

    // Keep the particle inside environment
    x = fmod(x, world_width); // problem 7/28
    y = fmod(y, world_height);

    // Update particle state
    x_y_theta_dataType[idx] = x; //particles_x[idx];
    x_y_theta_dataType[idx + 1] = y;// particles_y[idx];
    x_y_theta_dataType[idx + 2] = theta;//particles_theta[idx];
    x_y_theta_dataType[idx + 3] = data_type;//data_types[idx];
    moveDist_SenseDist_particleDepositStrength_lifetime[idx] = move_distance;//move_distance_buffer[idx];
    moveDist_SenseDist_particleDepositStrength_lifetime[idx + 1] = sense_distance;//sense_distance_buffer[idx];
    moveDist_SenseDist_particleDepositStrength_lifetime[idx + 2] = agent_deposit; //particle_deposit_strength_buffer[idx];
    moveDist_SenseDist_particleDepositStrength_lifetime[idx + 3] = lifetime;
    red_green_blue_alpha[idx] = red;
    red_green_blue_alpha[idx + 1] = green;
    red_green_blue_alpha[idx + 2] = blue;
    red_green_blue_alpha[idx + 3] = alpha;



    // Update deposit and trace grids
    tex_deposit[uint2(x, y)] += float4(agent_deposit, agent_deposit, agent_deposit, 1.0); // NOT ATOMIC! // the trace is not blurred, trace is not food, but agents also leave deposit

    float trace_calc = 1.0 - exp(3.0 * distance_scaling_factor);
    tex_trace[uint2(x, y)] = //float4(trace_calc, trace_calc, trace_calc, 1.0);
        float4(red, green, blue, alpha);

    particle_render_texture[uint2(x_normalized * world_width,
        y_normalized * world_height)] = float4(red, green, blue, alpha);//float4(x / 512.0, y / 512.0, 0.8, 1.0);

}
